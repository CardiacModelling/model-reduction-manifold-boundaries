[[model]]
name: Mazhari-IKr
author: Dominic Whittaker
# Initial values
ikr.c2 = 0
ikr.c3 = 0
ikr.o = 0
ikr.i = 0

#
# Simulation engine variables
#
[engine]
time = 0 bind time
pace = 0 bind pace

#
# Membrane potential
#
[membrane]
V = engine.pace
    desc: membane potential
    in [mV]

[nernst]
EK = -88 [mV]
#EK = (R*(T+273.15)/F)*log(Ko/Ki) in [mV]
#T = 21
#R = 8314
#F = 96485
#Ko = 4
#Ki = 130

[misc]
n_params = 17
LJP = 4.5

[ikr]
use membrane.V
IKr = g * o * (V - nernst.EK)

dot(c2) = p1 * exp(p2 * V) * c1 + p16 * c3 - (p3 * exp(-p4 * V) + p15) * c2
dot(c3) = p15 * c2 + psi * i + p7 * exp(-p8 * V) * o - (p16 + p13 * exp(p14 * V) + p5 * exp(p6 * V)) * c3
dot(o) = p5 * exp(p6 * V) * c3 + p11 * exp(-p12 * V) * i - (p7 * exp(-p8 * V) + p9 * exp(p10 * V)) * o
dot(i) = p13 * exp(p14 * V) * c3 + p9 * exp(p10 * V) * o - (psi + p11 * exp(-p12 * V)) * i
c1 = 1 - c2 - c3 - o - i

psi = (p7 * exp(-p8 * V) * p11 * exp(-p12 * V) * p13 * exp(p14 * V)) / (p5 * exp(p6 * V) * p9 * exp(p10 * V))

p1 = 0.0069
p2 = 0.0272
p3 = 0.0227
p4 = 0.0431
p5 = 0.0218
p6 = 0.0262
p7 = 0.0009
p8 = 0.0269
p9 = 0.0622
p10 = 0.0120
p11 = 0.0059
p12 = 0.0443
p13 = 1.29e-5
p14 = 2.71e-6
p15 = 0.0266
p16 = 0.1348
p17 = 0.1524

g = p17

[[script]]
import myokit
import myokit.pacing as pacing
import numpy as np
import matplotlib
import matplotlib.pyplot as pl

#
# Simple IKr test script
#

# Get model
m = get_model()

#p = get_protocol()

# Create pacing protocol
v = np.arange(-100, 50 + 10, 10)
p = pacing.steptrain(
        vsteps=v,
        vhold=-80,
        tpre=200,
        tstep=2000,
        tpost=1000)

#p = myokit.load_protocol('activation-test.mmt')
n_steps = 10

d = [
    'engine.time',
    'membrane.V',
    'ikr.IKr',
    ]

# Run simulation
s = myokit.Simulation(m, p)
s.set_tolerance(1e-8, 1e-8)
s.set_max_step_size(0.1)
d = s.run(p.characteristic_time(), log=d)

# Create colormap for plotting
cmap = matplotlib.cm.get_cmap('viridis')
norm = matplotlib.colors.Normalize(0, n_steps)

# Plot data as overlapping steps
d2 = d.npview()
d2 = d2.regularize(0.5)
d2 = d2.fold(3200)
pl.figure()
for k in xrange(n_steps):
    pl.subplot(2,1,1)
    pl.plot(d2.time(), d2['membrane.V', k], color=cmap(norm(k)))
    pl.subplot(2,1,2)
    pl.plot(d2.time(), d2['ikr.IKr', k], color=cmap(norm(k)))
pl.show()

